<?xml version="1.0" encoding="UTF-8"?>
<PageDefinition
  kind="blueprint"
  module="admin-community"
  route="members/manage"
  schemaVersion="1.0.0"
  contentVersion="1.1.0"
  locale="en-US"
>
  <Page id="admin-community-membership-manage">
    <Title>Manage membership record</Title>
    <Regions>
      <Region id="main">
        <Component id="manage-hero" type="HeroSection">
          <Props>
            <Prop name="variant" kind="static">minimal</Prop>
            <Prop name="eyebrow" kind="expression"><![CDATA[
              (() => {
                const mode = params.memberId ? 'Edit member' : 'Add new member';
                return `${mode} Â· Community module`;
              })()
            ]]></Prop>
            <Prop name="headline" kind="expression"><![CDATA[
              (() => {
                const records = data.membershipRecords?.records ?? [];
                const fallback = records[0] ?? {};
                const record = records.find((item) => item.id === params.memberId) ?? fallback;
                return params.memberId ? `Update ${record.profile?.fullName ?? record.fullName ?? 'member'}'s profile` : 'Create a new household profile';
              })()
            ]]></Prop>
            <Prop name="description" kind="static">Align membership data with pastoral care, serving teams, and financial commitments from one form.</Prop>
            <Prop name="image" kind="expression"><![CDATA[
              (() => {
                if (!params.memberId) {
                  return null;
                }
                const records = data.membershipRecords?.records ?? [];
                const fallback = records[0] ?? {};
                const record = records.find((item) => item.id === params.memberId) ?? fallback;
                const photoUrl = record.photoUrl ?? record.profile?.photoUrl ?? '';
                if (!photoUrl) {
                  return null;
                }
                const fullName = record.profile?.fullName ?? record.fullName ?? 'Member';
                return {
                  src: photoUrl,
                  alt: `${fullName}'s profile photo`
                };
              })()
            ]]></Prop>
            <Prop name="metrics" kind="expression"><![CDATA[
              (() => {
                const records = data.membershipRecords?.records ?? [];
                const fallback = records[0] ?? {};
                if (!params.memberId) {
                  return [
                    { label: 'Mode', value: 'Create new record', caption: 'Member ID assigned after approval' },
                    { label: 'Center', value: 'Assign center', caption: 'Choose from the form below' },
                    { label: 'Recurring giving', value: '$0', caption: 'Not enrolled' }
                  ];
                }
                const record = records.find((item) => item.id === params.memberId) ?? fallback;
                const formatCurrency = (value) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: value >= 1000 ? 0 : 2 }).format(value ?? 0);
                return [
                  { label: 'Mode', value: 'Edit existing record', caption: `Member ID ${record.id}` },
                  { label: 'Center', value: record.center ?? 'Downtown Center', caption: 'Can be changed below' },
                  { label: 'Recurring giving', value: formatCurrency(record.giving?.recurring?.amount ?? 0), caption: record.giving?.recurring?.frequency ?? 'Not enrolled' }
                ];
              })()
            ]]></Prop>
            <Prop name="secondaryCta" kind="expression"><![CDATA[
              (() => {
                const target = params.memberId ? `/admin/members/${params.memberId}` : '/admin/members/list';
                return { id: 'cancel-cta', config: { label: 'Cancel', url: target, variant: 'secondary' } };
              })()
            ]]></Prop>
          </Props>
        </Component>
        <Component id="manage-form" type="AdminFormSection">
          <Props>
            <Prop name="title" kind="static">Membership details</Prop>
            <Prop name="fields" kind="expression"><![CDATA[
              (() => {
                const blueprintFields = data.formBlueprint?.fields ?? [];
                const lookupGroups = data.membershipLookups?.lookups ?? {};
                return blueprintFields.map((field) => {
                  const { lookupId, quickCreate, ...config } = field ?? {};
                  const labelText = String(field?.label ?? 'Option');
                  if (!lookupId) {
                    return {
                      ...config,
                      ...(quickCreate ? { quickCreate } : {}),
                    };
                  }
                  const lookupItems = lookupGroups[lookupId] ?? [];
                  const quickCreateConfig = quickCreate
                    ? {
                        label: quickCreate.label ?? `Add ${labelText.toLowerCase()}`,
                        description:
                          quickCreate.description ??
                          `Create a new ${labelText.toLowerCase()} without leaving the form.`,
                        submitLabel: quickCreate.submitLabel ?? 'Save option',
                        successMessage: quickCreate.successMessage ?? `${labelText} added`,
                        action: {
                          id: `quick-create-${lookupId}`,
                          kind: 'metadata.service',
                          config: {
                            handler: 'admin-community.members.manage.lookup.create',
                            lookupId,
                          },
                        },
                      }
                    : null;
                  return {
                    ...config,
                    lookupId,
                    options: lookupItems.map((item) => ({ label: item.value, value: item.id })),
                    ...(quickCreateConfig ? { quickCreate: quickCreateConfig } : {}),
                  };
                });
              })()
            ]]></Prop>
            <Prop name="initialValues" kind="expression"><![CDATA[
              (() => {
                const records = data.membershipRecords?.records ?? [];
                const fallback = records[0] ?? {};
                const lookupGroups = data.membershipLookups?.lookups ?? {};
                const defaultStageId = lookupGroups['membership.stage']?.[0]?.id ?? '';
                const defaultTypeId = lookupGroups['membership.type']?.[0]?.id ?? '';
                const defaultCenterId = lookupGroups['membership.center']?.[0]?.id ?? '';
                if (!params.memberId) {
                  return {
                    profilePhoto: '',
                    firstName: '',
                    lastName: '',
                    email: '',
                    phone: '',
                    stage: defaultStageId,
                    membershipType: defaultTypeId,
                    center: defaultCenterId,
                    joinDate: '',
                    preferredContact: 'Email',
                    recurringGiving: '',
                    pledgeAmount: '',
                    careStatus: 'observation',
                    carePastor: '',
                    followUpDate: '',
                    servingTeam: '',
                    servingRole: '',
                    servingSchedule: '',
                    discipleshipNextStep: '',
                    notes: '',
                    tags: ''
                  };
                }
                const record = records.find((item) => item.id === params.memberId) ?? fallback;
                const profile = record.profile ?? {};
                const profilePhoto = record.photoUrl ?? profile.photoUrl ?? '';
                const tags = profile.tags ?? record.tags ?? [];
                return {
                  profilePhoto,
                  firstName: profile.firstName ?? '',
                  lastName: profile.lastName ?? '',
                  email: record.contact?.email ?? '',
                  phone: record.contact?.phone ?? '',
                  stage: profile.stageId ?? record.stageId ?? defaultStageId,
                  membershipType: profile.membershipTypeId ?? record.membershipTypeId ?? defaultTypeId,
                  center: profile.centerId ?? record.centerId ?? defaultCenterId,
                  joinDate: profile.joinDate ?? '',
                  preferredContact: profile.preferredContact ?? record.contact?.preferred ?? 'Email',
                  recurringGiving: record.giving?.recurring?.amount ?? '',
                  pledgeAmount: record.giving?.pledge ?? '',
                  careStatus: profile.careStatus ?? record.carePlan?.statusKey ?? 'observation',
                  carePastor: profile.carePastor ?? record.carePlan?.assignedTo ?? '',
                  followUpDate: profile.followUpDate ?? '',
                  servingTeam: profile.servingTeam ?? record.serving?.team ?? '',
                  servingRole: profile.servingRole ?? record.serving?.role ?? '',
                  servingSchedule: profile.servingSchedule ?? record.serving?.schedule ?? '',
                  discipleshipNextStep: profile.discipleshipNextStep ?? record.discipleship?.nextStep ?? '',
                  notes: profile.notes ?? '',
                  tags: Array.isArray(tags) ? tags.join(', ') : String(tags ?? ''),
                };
              })()
            ]]></Prop>
            <Prop name="mode" kind="expression"><![CDATA[params.memberId ? 'edit' : 'create']]></Prop>
            <Prop name="submitLabel" kind="expression"><![CDATA[params.memberId ? 'Save changes' : 'Create member']]></Prop>
            <Prop name="submitAction" kind="action" actionId="save-member" />
            <Prop name="cancelAction" kind="expression"><![CDATA[
              (() => {
                if (params.memberId) {
                  return { id: 'cancel-edit', config: { label: 'Back to profile', url: `/admin/members/${params.memberId}`, variant: 'ghost' } };
                }
                return { id: 'cancel-create', config: { label: 'Back to list', url: '/admin/members/list', variant: 'ghost' } };
              })()
            ]]></Prop>
            <Prop name="footnote" kind="static">Submitting the form drafts changes for pastoral review. Finance admins receive a notification for giving updates.</Prop>
          </Props>
        </Component>
      </Region>
    </Regions>
    <DataSources>
      <DataSource id="membershipRecords" kind="service">
        <Json><![CDATA[
          {
            "records": [
              {
                "id": "mem_001",
                "fullName": "Avery Johnson",
                "photoUrl": "https://images.unsplash.com/photo-1544723795-3fb6469f5b39?auto=format&fit=facearea&w=400&h=400&q=80",
                "stageKey": "active",
                "membershipTypeKey": "covenant-member",
                "center": "Downtown Center",
                "centerKey": "downtown",
                "tags": ["Hospitality Team", "Leadership Cohort"],
                "contact": { "email": "avery.johnson@example.org", "phone": "(555) 204-1188", "preferred": "Text" },
                "giving": { "recurring": { "amount": 900, "frequency": "Monthly", "method": "ACH" }, "pledge": 22000 },
                "serving": { "team": "Hospitality", "role": "Usher Captain", "schedule": "2nd & 4th Sundays Â· 8:30a" },
                "discipleship": { "nextStep": "Mentor two new ushers before Advent." },
                "carePlan": { "status": "Active", "statusKey": "active", "assignedTo": "Pastor Lauren Patel" },
                "profile": {
                  "fullName": "Avery Johnson",
                  "firstName": "Avery",
                  "lastName": "Johnson",
                  "membershipType": "Covenant member",
                  "membershipTypeKey": "covenant-member",
                  "joinDate": "2016-03-14",
                  "preferredContact": "Text",
                  "careStatus": "active",
                  "carePastor": "Pastor Lauren Patel",
                  "followUpDate": "2024-10-28",
                  "servingTeam": "Hospitality",
                  "servingRole": "Usher Captain",
                  "servingSchedule": "2nd & 4th Sundays Â· 8:30a",
                  "discipleshipNextStep": "Mentor two new ushers before Advent.",
                  "notes": "Leading hospitality leadership cohort.",
                  "photoUrl": "https://images.unsplash.com/photo-1544723795-3fb6469f5b39?auto=format&fit=facearea&w=400&h=400&q=80",
                  "tags": ["Hospitality Team", "Leadership Cohort"]
                }
              },
              {
                "id": "mem_002",
                "fullName": "Elena Ruiz",
                "photoUrl": "https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?auto=format&fit=facearea&w=400&h=400&q=80",
                "stageKey": "new",
                "membershipTypeKey": "attender",
                "center": "Northside Center",
                "centerKey": "northside",
                "tags": ["Foundations Track"],
                "contact": { "email": "elena.ruiz@example.org", "phone": "(555) 407-9931", "preferred": "Phone" },
                "giving": { "recurring": null, "pledge": 0 },
                "serving": { "team": "Foundations", "role": "Participant", "schedule": "Sundays Â· 9:30a" },
                "discipleship": { "nextStep": "Complete covenant interview." },
                "carePlan": { "status": "Observation", "statusKey": "observation", "assignedTo": "Connections Team" },
                "profile": {
                  "fullName": "Elena Ruiz",
                  "firstName": "Elena",
                  "lastName": "Ruiz",
                  "membershipType": "Attender",
                  "membershipTypeKey": "attender",
                  "joinDate": "",
                  "preferredContact": "Phone",
                  "careStatus": "observation",
                  "carePastor": "Connections Team",
                  "followUpDate": "2024-10-24",
                  "servingTeam": "Foundations",
                  "servingRole": "Participant",
                  "servingSchedule": "Sundays Â· 9:30a",
                  "discipleshipNextStep": "Complete covenant interview.",
                  "notes": "Recently relocated from Denver.",
                  "photoUrl": "https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?auto=format&fit=facearea&w=400&h=400&q=80",
                  "tags": ["Foundations Track"]
                }
              },
              {
                "id": "mem_003",
                "fullName": "Samuel and Dana Lee",
                "photoUrl": "https://images.unsplash.com/photo-1531891437562-4301cf35b7e4?auto=format&fit=facearea&w=400&h=400&q=80",
                "stageKey": "active",
                "membershipTypeKey": "covenant-member",
                "center": "Southridge Center",
                "centerKey": "southridge",
                "tags": ["Marriage Mentors"],
                "contact": { "email": "samuel.dana.lee@example.org", "phone": "(555) 782-4410", "preferred": "Email" },
                "giving": { "recurring": { "amount": 2000, "frequency": "Monthly", "method": "Card" }, "pledge": 30000 },
                "serving": { "team": "Groups", "role": "Marriage mentors", "schedule": "1st & 3rd Wednesdays" },
                "discipleship": { "nextStep": "Launch two new marriage groups in Q1." },
                "carePlan": { "status": "Resolved", "statusKey": "resolved", "assignedTo": "" },
                "profile": {
                  "fullName": "Samuel and Dana Lee",
                  "firstName": "Samuel",
                  "lastName": "Lee",
                  "membershipType": "Covenant member",
                  "membershipTypeKey": "covenant-member",
                  "joinDate": "2009-05-18",
                  "preferredContact": "Email",
                  "careStatus": "resolved",
                  "carePastor": "",
                  "followUpDate": "",
                  "servingTeam": "Groups",
                  "servingRole": "Marriage mentors",
                  "servingSchedule": "1st & 3rd Wednesdays",
                  "discipleshipNextStep": "Launch two new marriage groups in Q1.",
                  "notes": "Trusted mentors for pre-marriage program.",
                  "photoUrl": "https://images.unsplash.com/photo-1531891437562-4301cf35b7e4?auto=format&fit=facearea&w=400&h=400&q=80",
                  "tags": ["Marriage Mentors", "Retreat Leaders"]
                }
              }
            ]
          }
        ]]></Json>
        <Config>
          <handler>admin-community.members.manage.membershipRecords</handler>
          <limit>5</limit>
        </Config>
      </DataSource>
      <DataSource id="membershipLookups" kind="service">
        <Json><![CDATA[
          {
            "lookups": {
              "membership.stage": [
                { "id": "active", "value": "Active member" },
                { "id": "new", "value": "New here" },
                { "id": "care", "value": "Shepherding" },
                { "id": "inactive", "value": "Inactive" }
              ],
              "membership.type": [
                { "id": "covenant-member", "value": "Covenant member" },
                { "id": "attender", "value": "Attender" },
                { "id": "partner-process", "value": "Partner in process" }
              ],
              "membership.center": [
                { "id": "downtown", "value": "Downtown" },
                { "id": "northside", "value": "Northside" },
                { "id": "southridge", "value": "Southridge" },
                { "id": "online", "value": "Online" }
              ]
            }
          }
        ]]></Json>
        <Config>
          <handler>admin-community.members.manage.lookups</handler>
        </Config>
      </DataSource>
      <DataSource id="formBlueprint" kind="static">
        <Json><![CDATA[
          {
            "fields": [
              {
                "name": "profilePhoto",
                "label": "Profile photo",
                "type": "image",
                "colSpan": "full",
                "helperText": "Upload or remove the member's profile picture."
              },
              { "name": "firstName", "label": "First name", "type": "text", "colSpan": "half", "required": true },
              { "name": "lastName", "label": "Last name", "type": "text", "colSpan": "half", "required": true },
              { "name": "email", "label": "Email", "type": "email", "colSpan": "half", "required": true },
              { "name": "phone", "label": "Mobile", "type": "tel", "colSpan": "half", "placeholder": "(000) 000-0000" },
              {
                "name": "stage",
                "label": "Membership stage",
                "type": "select",
                "colSpan": "half",
                "lookupId": "membership.stage",
                "quickCreate": {
                  "label": "Add stage",
                  "description": "Name the stage and the code will be generated automatically.",
                  "submitLabel": "Save stage",
                  "successMessage": "Membership stage saved"
                }
              },
              {
                "name": "membershipType",
                "label": "Membership type",
                "type": "select",
                "colSpan": "half",
                "lookupId": "membership.type",
                "quickCreate": {
                  "label": "Add membership type",
                  "description": "Name the membership type and the code will be generated automatically.",
                  "submitLabel": "Save type",
                  "successMessage": "Membership type saved"
                }
              },
              {
                "name": "center",
                "label": "Center",
                "type": "select",
                "colSpan": "half",
                "lookupId": "membership.center",
                "quickCreate": {
                  "label": "Add center",
                  "description": "Name the campus or center and the code will be generated automatically.",
                  "submitLabel": "Save center",
                  "successMessage": "Center saved"
                }
              },
              { "name": "joinDate", "label": "Join date", "type": "date", "colSpan": "half" },
              {
                "name": "preferredContact",
                "label": "Preferred contact",
                "type": "select",
                "colSpan": "half",
                "options": [
                  { "label": "Email", "value": "Email" },
                  { "label": "Phone", "value": "Phone" },
                  { "label": "Text", "value": "Text" }
                ]
              },
              { "name": "recurringGiving", "label": "Recurring giving", "type": "currency", "colSpan": "half", "placeholder": "0.00" },
              { "name": "pledgeAmount", "label": "Pledge amount", "type": "currency", "colSpan": "half", "placeholder": "0.00" },
              {
                "name": "careStatus",
                "label": "Care status",
                "type": "select",
                "colSpan": "half",
                "options": [
                  { "label": "Active", "value": "active" },
                  { "label": "Observation", "value": "observation" },
                  { "label": "Resolved", "value": "resolved" }
                ]
              },
              { "name": "carePastor", "label": "Assigned pastor", "type": "text", "colSpan": "half" },
              { "name": "followUpDate", "label": "Follow-up date", "type": "date", "colSpan": "half" },
              { "name": "servingTeam", "label": "Serving team", "type": "text", "colSpan": "half" },
              { "name": "servingRole", "label": "Serving role", "type": "text", "colSpan": "half" },
              { "name": "servingSchedule", "label": "Serving schedule", "type": "text", "colSpan": "half" },
              { "name": "discipleshipNextStep", "label": "Next discipleship step", "type": "textarea", "colSpan": "full" },
              { "name": "notes", "label": "Pastoral notes", "type": "textarea", "colSpan": "full" },
              { "name": "tags", "label": "Tags", "type": "text", "colSpan": "full", "helperText": "Comma separated labels to power filtered lists." }
            ]
          }
        ]]></Json>
      </DataSource>
    </DataSources>
    <Actions>
      <Action id="save-member" kind="metadata.service">
        <Config>
          <Handler>admin-community.members.manage.saveMember</Handler>
          <CreateMessage>New member record drafted.</CreateMessage>
          <UpdateMessage>Member record updated.</UpdateMessage>
          <RedirectTemplate>/admin/members/{{ memberId }}</RedirectTemplate>
        </Config>
      </Action>
    </Actions>
  </Page>
</PageDefinition>
